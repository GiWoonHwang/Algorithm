# 기본 자료구조와 배열
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 배열 : 배열을 사용하면 따로따로 흩어진 변수를 하나로 묶어서 사용할 수 있어 코드를 쉽고 효율적으로 작성할 수 있다.
# 튜플 : 원소에 순서를 매겨 결합한 것으로 원소를 변경할 수 없는 이뮤터블 자료형 입니다.
# 언팩 : 좌변에 여러개의 변수를 놓고 우변에는 리스트나 튜플을 놓으면, 우변의 원소를 좌변의 변수에 한번에 대입할 수있다. 이와같이 리스트나 튜플의 원솟값들을 풀어 여러 변수에 대입하는 것을 언팩 이라고 한다.
# 슬라이스 : 리스트 또는 튜플의 원소 일부를 연속해서 또는 일정한 간격을 ㅗ꺼내 새로운 리스트 또는 튜플을 만드는 것
# 자료구조 : 데이터 단위와 데이터 자체 사이의 물리적 또는 논리적 관계
# 내포 표기 생성 : 리스트 안에서 for,if문을 사용하여 새로운 리스트를 생성하는 기법
# for else 문 : for문이 중간에 break등으로 끊기지 않고 끝가지 수행되었을 때, 수행하는 코드를 담고 있다.
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 학생 5명의 시험점수를 입력받아 합계와 평균 출력하기

# print('학생 그룹 점수의 합계와 평균을 구합니다')

# score1 = int(input('1번 학생의 점수를 입력하세요'))
# score2 = int(input('2번 학생의 점수를 입력하세요'))
# score3 = int(input('3번 학생의 점수를 입력하세요'))
# score4 = int(input('4번 학생의 점수를 입력하세요'))
# score5 = int(input('5번 학생의 점수를 입력하세요'))

# total = 0
# total += score1
# total += score2
# total += score3
# total += score4
# total += score5

# print(f'합계는{total}점 입니다.')
# print(f'평균은{total/5}점 입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 연습

# x = [11,22,33,44,55,66,77]

# print(x[2])
# x[-4] = 3.14
# print(x)

# s = [11,22,33,44,55,66,77]
# print(s[0:6])
# print(s[0:7])
# print(s[0:7:2])
# print(s[-4:-2])
# print(s[3:1])
# print(s[:])
# print(s[:3])
# print(s[-3:])
# print(s[::2])
# print(s[::-1])


# x = [15,64,7,3.14,[32,55],'abc']

# print(len(x))

# number = [1,2,3,4,5,6] 

# twise = [num * 2 for num in number if num % 2 == 1]

# print(twise)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 배열의 최대값을 출력하는 함수

# def max_of(a):
#     maximum = a[0]
#     for i in range(1,len(a)):
#         if a[i] > maximum:
#             maximum = a[i]
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 시퀸스 원소와 최댓값 출력하기

# from typing import Any, Sequence

# def max_of(a: Sequence) -> Any:
#     # 시퀸스형 a원소의 최댓값을 반환 ?
#     maximum = a[0]
#     for i in range(1, len(a)):
#         if a[i] > maximum:
#             maximum = a[i]
#     return maximum

# if __name__ == '__main__':
#     print('배열의 최대값을 구합니다')
#     num = int(input('원소 수를 입력하세요.: '))
#     x = [None] * num

#     for i in range(num):
#         x[i] = int(input(f'x[{i}]값을 입력하세요. :'))

#     print(f'최댓값은 {max_of(x)}입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 위에서 작성한 함수 import해서 사용하기( 나는 같은 페이지에 사용하기 때문에 따라하기만 했다.)

# from max import max_of

# print('배열의 최대값을 구합니다.')
# print('주의 : End를 입력하면 종료합니다.')

# number = 0
# x = []

# while True:
#     s = input(f'x[{number}]값을 입력하세요.')
#     if s == 'End':
#         break
#     x.append(int(s)) # 배열의 맨 끝에 추가된다.

#     number +=1
# print(f'{number}개를 입력했습니다.')
# print(f'최댓값은 {max_of(x)} 입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 배열 원소의 최댓값을 구해서 출력하기 (원솟값을 난수로 생성)

# import random
# from max import max_of

# print('난수의 최대값을 구합니다.')
# num = int(input('난수의 개수를 입력하세요.:'))
# lo = int(input('난수의 최소값을 입력하세요.:'))
# hi = int(input('난수의 최대값을 입력하세요.:'))

# x = [None] * num

# for i in range(num):
#     x[i] = random.randint(lo,hi)

# print(f'{(x)}')
# print(f'이 가운데 최댓값은 {max_of(x)}입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1000 이하의 소수를 나열하기

# counter = 0 # 나눗셈 횟수를 카운트

# for n in range(2,11):
#     for i in range (2,n):
#         counter += 1
#         # print(counter)
#         if n % i == 0:
#             break
#     else :
#         print(n)
# print(f'나눗셈을 실행한 횧수 " {counter}')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1000 이하의 소수를 나열하기 (알고리즘 개선1)

# counter = 0 # 나눗셈 횟수를 카운트
# ptr = 0 # 이미 찾은 소수의 개수를 변수에 담는다
# prinme = [None] * 500

# prinme[ptr] = 2 # 2는 첫번째 소수이므로 초기값으로 지정
# ptr += 1

# for n in range(3, 1001, 2):
#     for i in range(1,ptr):
#         counter += 1
#         if i % n == 0:
#             break
    
#     else:
#         prinme[ptr] = n
#         ptr += 1

# for i in range(ptr):
#     print(prinme[i])
# print(f'나눗셈을 한 횟수{counter}')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1000이하의 소수를 나열하기 (알고리즘 개선 2)
# 이 코드에 이해가 추가적으로 더 필요함
# counter = 0 # 곱셈과 나눗셈을 합한 횟수
# ptr = 0 # 이미 찾은 소수의 개수
# prime = [None] * 500

# prime[ptr] = 2
# ptr += 1

# prime[ptr] = 3
# ptr += 1

# for n in range(5, 1001, 2) : # 홀수만을 대상으로 설정
#     i = 1
#     while prime[i] * prime[i] <= n:
#         counter += 2
#         if n % prime[i] == 0:
#             break
#         i += 1

#     else:
#         prime[ptr] = n
#         ptr += 1
#         counter += 1

# for i in range(ptr):
#     print(prime[i])

# print(f'곱셈과 나눗셈을 실행한 횟수 {counter}') 
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 자료형을 정하지 않은 리스트 원소 확인하기

# x = [15,64,7,3.14,[32,55],'ABC']

# for i in range(len(x)):
#     print(f'x[{i}] = {x[i]}')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 얕은복사 : 참조하는곳까지 복사되므로 값이 변경되면 바뀜

# x = [[1,2,3],[4,5,6]]
# y = x.copy()
# x[0[1]] = 9
# print(x)
# print(y)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 깊은복사

# import copy

# x = [[1,2,3], [4,5,6]]

# y = copy.deepcopy(x)

# x[0][1] = 9

# print(x)
# print(y)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 각 배열 원소의 최대값을 구해서 출력하기(튜플, 문자열, 문자열 리스트)

# from max import max_of

# t = (4,7,5.6,2,3.14,1)
# s = 'string'
# a = ['DTS','AAC','FLAC']

# print(f'{t}의 최대값은 {max_of(t)} 입니다.')
# print(f'{s}의 최대값은 {max_of(s)} 입니다.')
# print(f'{a}의 최대값은 {max_of(a)} 입니다.')
# ------------------------------------------------------------------------------------------------

# 보충

# lst1 = [1,2,3,4,5]

# lst2 = [1,2,3,4,5]

# print(lst1 is lst2)

# lst1 = [1,2,3,4,5]
# lst2 = lst1
# print(lst1 is lst2)

# lst1[2] = 9

# print(lst2)
# ------------------------------------------------------------------------------------------------

# 리스트의 모든 원소를 스캔하기(원소 수를 미리 파악한다.)

# x = ['John', 'George', 'Paul', 'Ringo']

# for i in range(len(x)):
#     print(f'x[{i}] = {x[i]}')
# ------------------------------------------------------------------------------------------------

# 리스트의 모든 원소를 enumerate() 함수로 스캔하기

# x = ['John', 'George', 'Paul', 'Ringo']

# for i, name in enumerate(x):
#     # print(i)
#     # print(name)
#     print(f'x[{i}] = {name}')
#------------------------------------------------------------------------------------------------

# 리스트의 모든 원소를 enumerate() 함수로 스캔하기(1부터 카운트)

# x = ['John', 'George', 'Paul', 'Ringo']

# for i, name in enumerate(x,1): # 뒤에 숫자를 넣어주면 그 숫자부터 카운트롤 한다. (없으면 0부터 시작함)
#     print(f'{i}번째 = {name}')
#------------------------------------------------------------------------------------------------

# 리스트의 모든 원소를 스캔하기(인덱스 값을 사용하지 않음)

# x = ['John', 'George', 'Paul', 'Ringo']
# for i in x:
#     print(i)
#------------------------------------------------------------------------------------------------

# 배열 원소를 역순으로 정렬하기
# for i in range(n // 2):
#     a[i] 와 a[n-i-1]의 값을 교환한다    

# from typing import Any, MutableSequence

# def reverse_array(a : MutableSequence) -> None:
#     n = len(a)
#     for i in range(n // 2):
#         a[i], a[n-i-1] = a[n-i-1], a[i] 
        
# if __name__ == '__main__':
#     print('배열 원소를 역순으로 정렬합니다')
#     nx = int(input('원소 수를 입력하세요.:'))
#     x = [None] * nx
#     print(x)
    
#     for i in range(nx):
#         x[i] = int(input(f'x[{i}]값을 입력하세요. :'))
        
#     reverse_array(x)
    
#     print('배열 원소를 역순으로 정렬했습니다.')
#     for i in range(nx):
#         print(f'x[{i}] = {x[i]}')
#------------------------------------------------------------------------------------------------

# 10진수 정숫값을 입력받아 2~36진수로 변환하여 출력하기

# def card_conv(x : int, r : int) -> str:
#     # 정수값을 r진수로 변환한 뒤 그 수를 나타내는 문자열을 반환 
    
#     d = ''
#     dchar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    
#     while x > 0:
#         d += dchar[x % r] # 해당하는 문자를 꺼내 결합
#         x //= r # 이게왜 필요한지 모르겠습니다. 이게 없으면 실행이 안되기는 하는데 .. 정확이 무엇을 의미하는지
        
        
#     return d[::-1] # 역순으로 반환
    

# if __name__ == '__main__':
#     print('10진수를 n진수로 변환합니다.')
    
#     while True:
#         while True : # 음이 아닌 정수를 입력받는다.
#             no = int(input('변환할 값으로 음이 아닌 정수를 입력하세요.:'))
#             if no > 0:
#                 break
            
#         while True : # 2~36진수의 정숫값을 입력받는다.
#             cd = int(input('어떤 진수로 변환할까요? :'))
#             if 2 <= cd <= 36:
#                 break
            
        
#         print(f'{cd}진수로는 {card_conv(no, cd)} 입니다.')
        
#         retry = input('한 번 더 변환할까요??? Y ---예 / N ---아니요) :')
#         if retry in {'N', 'n'}:
#             break
#------------------------------------------------------------------------------------------------

# # 10진수 정숫값을 입력받아 2~36진수로 변환하여 출력하기

# def card_conv(x: int, r: int) -> str:
#     # 정수값 x를 진수 r로 변환한디 그 수를 나타내는 문자열을 반환 
#     d = ''
#     dchar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
#     n = len(str(x))
#     print(n)
#     # d가 있고없고 차이가 무엇일까 ..
#     print(f'{r:2} | {x:{n}d}') # 이거 뭔뜻 ?
#     print(f'{r:2} | {x:{n}}') # 이거 뭔뜻 ?
    
#     while x > 0:
#         print(' +' + (n+2) * '-')
#         if x // r:
#             print(f'1.{r:2} | {x // r:{n}d} --- {x % r}')
#             print(f'2.{r:2} | {x // r:{n}} --- {x % r}')
            
#         else:
#             print(f'  {x //r:{n}d} ---{x % r}')
        
#         d += dchar[x % r]
#         x //= r
#     return d[::-1]

# if __name__ == '__main__':
#     print('10진수를 n진수로 변환합니다.')
    
#     while True:
#         while True : # 음이 아닌 정수를 입력받는다.
#             no = int(input('변환할 값으로 음이 아닌 정수를 입력하세요.:'))
#             if no > 0:
#                 break
            
#         while True : # 2~36진수의 정숫값을 입력받는다.
#             cd = int(input('어떤 진수로 변환할까요? :'))
#             if 2 <= cd <= 36:
#                 break
            
        
#         print(f'{cd}진수로는 {card_conv(no, cd)} 입니다.')
        
#         retry = input('한 번 더 변환할까요??? Y ---예 / N ---아니요) :')
#         if retry in {'N', 'n'}:
#             break

#------------------------------------------------------------------------------------------------

# # 1부터 n까지 

# def sum_1ton(n):
#     # 1부터 n까지 정수의 합
    
#     s = 0
#     while n > 0:
#         s += n
#         n -= 1
#     return s

# x = int(input('x의 값을 입력하세요. :'))

# print(f'1부터 {x}까지 정수의 합은 {sum_1ton(x)}입니다.')
#------------------------------------------------------------------------------------------------

# 리스트에서 임의의 원솟값을 업데이트 하기

# def change(lst, idx, val):
#     # lst[idx]의 값을 val로 업데이트
#     lst[idx] = val
    

# x = [11,22,33,44,55]
# print('x = ', x)

# index = int(input('업데이트할 인덱스를 선택하세요.:'))
# value = int(input('새로운 값을 입력하세요. :'))

# change(x,index,value)

# print(f'x = {x}')
#------------------------------------------------------------------------------------------------

# 1000 이하의 소수를 나열하기
# 소수 2부터 n-1까지 어떤 정수로도 나누어 떨어지지 않는다.

# counter = 0

# for n in range(2, 1001):
#     for i in range(2,n):
#         counter +=1
#         print(counter)

        # if n % i == 0:
        #     break
    # else:
    #     print(n)
    

# print(f'나눗셈을 실행한 횟수: {counter}')
#------------------------------------------------------------------------------------------------

        