# 알고리즘 기초
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 알고리즘 : 어떠한 문제를 해결하기 위한 일련의 절차
# 분기 : 분기란 프로그램의 실행 흐름을 다른 곳으로 변경하는 명령을 뜻한다.
# 연산자와 피연산자 : 프로그래밍 언어에서는 +,-등의 기호를 산술 연산자, 연산 대상을 피연사자 라고 합니다.
# 단항 연산자 : -a
# 이항 연산자 : a < b
# 삼항 연산자 : a if b else c
# while : 어떤 조건이 성립하는 동안 반복해서 처리하는 것을 '반복구조'라 하고 일반적으로 '루프'라고 합니다. 이떄 while 문은 실행하기 전에 반복을 계속할 것인지를 판단하는데 이런 구조를
#         사전 '판단 반복 구조'라고 합니다.
# 이터러블 객체 : 반복할 수 있는 개체를 말하며, for i in range(1,5)와 같이 for in 문에 사용할 수 있다. 또한 파이썬의 대표적인 이터러블 자료형으로 list, str, tuple이 있다.
# 구조적 프로그래밍 : 입력과 출력으로 이루어진 구성 요소를 계층으로 배치하여 프로그램을 구성하는 방법을 구조적 프로그래밍이라고 합니다. 구조적 프로그래밍은 순차,선택,반복이라는 세 종류의 제어
#                   지금까지 배운 내용은 모두 구조적 프로그래밍을 바탕으로 합니다
# 변수 : 파이썬에서는 데이터, 함수, 클래스, 모듈, 패키지 등을 모두 객체로 취급합니다. 객체는 자료형을 가지면 메모리를 차지합니다. 파이썬의 이런 특징 때문에 파이썬의 변수는 값을 가지고 있지 않습니다.
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 세게의 정수를 입력받아 최댓값 구하기
# print(' 세 정수의 최댓값을 구합니다')

# a = int(input('정수를 입력하세요 : ')) 
# b = int(input('정수를 입력하세요 : '))
# c = int(input('정수를 입력하세요 : '))

# maximum = a # maximum이라는 변수에 a를 대입한다
# if b > maximum : maximum = b # 만약 b의 값이 maximum 보다 크면, maximum에 b를 대입한다
# if c > maximum : maximum = c # 만약 c의 값이 muximum 보다 크면, maximum에 c를 대입한다

# print(f'최댓값은 {maximum} 입니다')

# 이렇게 한 문장씩 처리되는 구조를 순차구조라고 한다. 9행은 단순한 대입문이지만, 10~11 행은 if문으로 복합문이라고 한다. 또 if와 콜론사이에 있는 식을 조건식이라고 한다.
# 조건식으로 평가한 결과에 따라 프로그램의 실행 흐름이 변경되는데, 이러한 구조를 선택구조 라고 한다

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 문자열과 숫자 입력받기
# print('이름을 입력하세요. :', end='')

# name = input()

# print(f'안녕하세요 {name}님.')

# # 조금 더 간단하게 구현해보자
# name = input('이름을 입력하세요. :')

# print(f'안녕하세요. {name}님')
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 세 정수의 최댓값 구하기2

# def max3(a,b,c) :
#     maximum = a
#     if b > maximum: maximum = b
#     if c > maximum: maximum = c
#     return maximum 

# print(max3(55,48,27))

# 함수 내부에서 처리한 값을 반환할 때에는 return문을 사용하면 된다. max3() 함수는 return문에서 maximum을 반환합닏다. 또한 실제로 함수가 반환하는 값을 얻으러면 함수를 호출해야 하며,
# 이를 '함수 호출식을 평가해야 함수가 반환한 값을 얻을 수 있다'고 합니다. 예를 들어 max3(3,2,1)과 같이 함수를 호출하면 세 값을 평가하여 반환값을 얻을 수 있다.

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 세 정수를 입력받아 중앙값 구하기1

# def med3(a,b,c):
#     if a >= b:
#         if b >= c:
#             return b
#         elif a <= c:
#             return a
#         else:
#             return c
#     elif a > c :
#         return a
#     elif b > c:
#         return c 
#     else:
#         return b

# print('세 정수의 중앙값을 구합니다.')    

# a = int(input('정수 a의 값을 입력하세요: '))
# b = int(input('정수 a의 값을 입력하세요: '))
# c = int(input('정수 a의 값을 입력하세요: '))

# print(f'중앙값은 {med3(a,b,c)}입니다')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 세 정수를 입력받아 중앙값 구하기2
# def med3(a,b,c):
#     if (b >= a and c <= a) or (b <=a and c >= a):
#         return a
#     elif (a > b and c < b ) or (c > b and a < b):
#         return b
#     else:
#         c

# print('세 정수의 중앙값을 구합니다.')    

# a = int(input('정수 a의 값을 입력하세요: '))
# b = int(input('정수 a의 값을 입력하세요: '))
# c = int(input('정수 a의 값을 입력하세요: '))

# print(f'중앙값은 {med3(a,b,c)}입니다')

# 이 코드는 효율적이지 않다. 첫번째 if문에서 a와 b의 대소 비교를 마친 후, elif문에서 다시 비교를 또 하기 때문
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 입력받은 정수의 부호(양수,음수,0) 출력하기
# n = int(input('정수를 입력하세요. :'))

# if n > 0:
#     print('이 수는 양수입니다.')
# elif n == 0:
#     print('이 수는 0 입니다.')
# else:
#     print('이 수는 음수 입니다.')

# 프로그램이 실행되는 부분은 단 하나이며 2개가 동시에 실행되거나 하나도 실행되지 않는 경우는 없습니다. 왜냐하면 이 프로그램의 흐름은 3개로 분기하기 때문입니다.
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3개로 분기하는 조건문
# n = int(input('정수를 입력하세요. :'))

# if n == 1:
#     print('A')
# elif n == 2:
#     print('B')
# else:
#     print('C')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 4개로 분기하는 조건문
# n = int(input('정수를 입력하세요. :'))

# if n == 1:
#     print('A')
# elif n == 2:
#     print('B')
# elif n == 3:
#     print('C')
# else : pass
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1부터 n까지 정수의 합 구하기
# print('1부터 n까지 정수의 합을 구합니다.')
# n = int(input('n 값을 입력하세요 :'))

# sum = 0
# i = 1
# while i <= n:
#     sum += i 
#     i += 1
# print(f'1부터 {n}까지의 합은 {sum} 입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1부터 n까지의 정수의 합 구하기(for)
# print('1부터 n까지 정수의 합을 구합니다.')
# n = int(input('n값을 입력하세요 : '))

# sum = 0
# i = 1
# for i in range(1, n + 1):
#     sum += i

# print(f'1부터 {n}까지 정수의 합은 {sum}입니다')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 연속하는 정수의 합 구하기 (연속하는 정수의 합을 구할 때 시작하는 값이 1이 아닌 정수를 입력받았다면 range 함수에 전달할 시작값과 끝값을 오름차순으로 정렬해야 한다.)

# print('a부터 b까지 정수의 합을 구합니다.')

# a = int(input('정수를 입력하세요 :'))
# b = int(input('정수를 입력하세요 :'))

# if a > b:
#     a, b = b, a

# sum = 0
# for i in range(a, b+1):
#     sum += i 

# print(f'{a}부터 {b}까지 정수의 합은 {sum}입니다')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# a부터 b까지 정수의 합 구하기1
# 더하는 수가 n개이면 +기호는 n-1개 출력해야 한다. 하지만 반복문 안에 if가 들어가는 것은 추천하지 않는다. 예를들어 a가 1이고 b가 10000이라면 i < b가 참이므로 9999번 실행되고
# else문은 단 한번만 실행된다. 잘 생각해보면 if문은 단 1번 실행되는 else문을 위한 것이다. 이럴 때에는 for문 안에 잇는 if문을 제외하여 별도로 실행하는 것이 좋다.

# print('a부터 b까지 정수의 합을 구합니다')
# a = int(input('정수 a를 입력하세요.:'))
# b = int(input('정수 b를 입력하세요.:'))

# if a > b :
#     a,b = b,a

# sum = 0
# for i in range (a, b+1):
#     if i < b:
#         print(f'{i}+', end='')
#     else :
#         print(f'{i}=', end='')
#     sum += i

# print(sum)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# a부터 b까지 정수의 합 구하기2
# 실행 결과는 위와 같지만 위보다 효율이 좋다 왜냐하면 판단 횟수가 n번에서 0번으로 감소했고 반복횟수고 1번으로 감소했다.

# print('a부터 b까지 정수의 합을 구합니다')
# a = int(input('정수 a를 입력하세요.:'))
# b = int(input('정수 b를 입력하세요.:'))

# if a > b :
#     a,b = b,a

# sum = 0
# for i in range(a,b):
#     print(f'{i}+', end='')
#     sum += i
# print(f'{b}=', end='')
# sum += b
# print(sum)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# +와 -을 번갈아 출력하기 1
# for 문을 반복할 때마다 if문을 수행해야 한다는 문제점이 있다. 즉 n이 5000이라면, if문도 5000번 실행된다는 것이다. 
# 두 번째로 이 프로그램은 상황에 따라 유연하게 수정되기 어렵다. 

# print('+와 -을 번갈아 출력합니다.') 
# n = int(input('몇 개를 출력할까요? : '))

# for i in range(n):
#     if i % 2:
#         print('-', end=" ")
#     else:
#         print('+', end=" ")

# print() #이게 있고 없고 차이가 무엇인지 모르겠다.
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# +와 -을 번갈아 출력하기 1

# print('+와 -을 번갈아 출력합니다.') 
# n = int(input('몇 개를 출력할까요? : '))

# for _ in range(n//2):
#     print('+-',end=' ')

# if n % 2 :
#     print('+', end=" ")
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# *을 n개 출력하되 w개마다 줄바꿈하기 1
# for문을 반복할 때마다 if문을 실행하므로 효율적이지 못하다.

# print('*개를 출력합니다')
# n = int(input('몇 개를 출력할까요? :'))
# w = int(input('몇 개마다 줄바꿈 할까요? :'))

# for i in range(n):
#     print('*', end='')
#     if i % w == w - 1:
#         print()

# if n % w : # 이 구문의 존재 이유를 모르겠음
#     print()
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# *을 n개 출력하되 w개마다 줄바꿈하기 2

# print('*개를 출력합니다')
# n = int(input('몇 개를 출력할까요? :'))
# w = int(input('몇 개마다 줄바꿈 할까요? :'))

# for _ in range(n // w):
#     print('*' * w)

# rest = n % w
# if rest :
#     print('*' * rest) #나머지 *을 출력하는 구문
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1부터 n까지 정수의 합 구하기(양수만 입력 받음)

# print('1부터 n까지 정수의 합을 구합니다.')

# while True:
#     n = int(input('정수를 입력하세요. :'))
#     if n > 0:
#         break

# sum = 0
# i = 1

# for i in range(1, n+1):
#     sum += i
#     i += 1

# print(f'1부터 {n}까지 정수의 합은 {sum}입니다.')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 가로, 세로 길이가 정수이고 넓이가 area인 직사각형에서 변의 길이 나열하기

# area = int(input('직사각형의 넓이를 입력하세요 :'))

# for i in range(1, area+1):
#     if i * i > area : break # i가 가장 긴 변의 넓이가 되는데 예를들어 넓이가 32이고 i가 6이되면 6*6=36이므로 넓이를 초과하게 된다.
#     if area % i: continue # 약수가 아닌 값이 나오면 다음 반복문으로 진행해라. 약수가 아닌 값이 나오면 넓이를 구할 수 없다.
#     print(f'{i} x {area // i}')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 10 ~ 99 사시의 난수 n개 생성하기 (13이 나오면 중단)

# import random

# n = int(input('난수의 개수를 입력하세요.:'))

# for _ in range(n):
#     r = random.randint(10,99)
#     print(r, end='  ')
#     if r == 13:
#         print('\n 프로그램을 종료합니다') 
#         break
# else :
#         print('\n 난수 생성을 종료합니다')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1 ~ 12까지 8을 건너뛰고 출력하기1
# 이 프로그램은 효율적이지 않다 만약 숫자를 100000까지 출력하는 경우 숫자를 딱 1개만 건너뛰도록 if, continue문을 사용한다면 판단을 10만번 해야하기 때문

# for i in range(1,13):
#     if i == 8:
#         continue
#     print(i,end=' ')

# print()
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1~12까지 8을 건너뛰고 출력하기2
# 단순히 리스트를 사용하여 건너뛰엇다. 다만 for문은 생성한 리스트의 원소를 하나씩 꺼내 반복하므로 반복을 위한 연산비용은 여전히 발생한다

# for i in list(range(1,8)+ list(9,13)):
#     print(i, end='')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 2자리 양수 (10 ~ 99) 입력받기

# print('2자리 양수를 입력하세요')

# while True:
#     no = int(input('값을 입력하세요. : '))
#     if no >= 10 and no <=99:
#         break

# print(f'입력받은 양수의 값은 {no}입니다')


#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 구구단 곱셈표 출력하기

# print('-' * 27)

# for i in range(1,10):
#     for j in range(1,10):
#         print(f'{i*j:4}', end=' ')
#     print()
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 왼쪽 아래가 직각인 이등변 삼각형으로 * 출력하기 

# print('왼쪽 아래가 직각인 이등변 삼각형을 출력합니다')
# n = int(input('짧은 변의 길이를 입력하세요.:'))

# for i in range(n):
#     for j in range(i+1):
#         print('*', end=' ')
#     print() # 행 변경
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 오른쪽 아래가 직각인 이등변 삼각형으로 * 출력하기

# print('오른쪽 아래가 직각인 이등변 삼각형을 출력합니다')
# n = int(input('짧은 변의 길이를 입력하세요.:'))

# for i in range(n):
#     for _ in range(n - i - 1):
#         print(' ', end=' ')
#     for _ in range(i + 1):
#         print('*', end=" ")

#     print( )

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 함수 내부-외부에서 정의한 변수와 객체의 식별 번호를 출력하기

# n = 1
# def put_id():
#     x = 1
#     print(f'id(x) = {id(x)}')

# print(f'id(1) = {id(1)}')
# print(f'id(n) = {id(n)}')

# put_id()
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 1부터 100까지 반복하여 출력하기

# for i in range(1,101):
#     print(f'i = {i:3}  id(i) = {id(i)}')
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
